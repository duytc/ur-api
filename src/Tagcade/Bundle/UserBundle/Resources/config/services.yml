parameters:
    tagcade.bundle.user.entity.user.class: Tagcade\Bundle\UserBundle\Entity\User
    # define user systems
    tagcade.user_system.publisher: tagcade_user_system_publisher
    tagcade.user_system.admin: tagcade_user_system_admin
    # event dispatched on login success
    tagcade_user.events.login_success: tagcade_user.events.login_success
    # used in \Tagcade\Bundle\UserBundle\DependencyInjection\Compiler\OverrideServiceCompilerPass
    tagcade_user.request.user_system.authentication_listener.class: Tagcade\Bundle\UserBundle\Request\UserSystem\AuthenticationListener

services:
    # returns our role model class for the current authenticated user entity
    tagcade.token:
        class: Symfony\Component\Security\Core\Authentication\Token\TokenInterface
        factory_service: security.context
        factory_method: getToken

    tagcade.user_role:
        class: Tagcade\Model\User\Role\UserRoleInterface
        factory_service: tagcade.token
        factory_method: getUser

    tagcade_user.domain_manager.publisher:
        class: Tagcade\Bundle\UserBundle\DomainManager\PublisherManager
        arguments:
            - @tagcade_user_system_publisher.user_manager

    tagcade_user.handler.authentication_success:
        class: Tagcade\Bundle\UserBundle\Handler\AuthenticationSuccessHandler
        arguments:
            - @lexik_jwt_authentication.handler.authentication_success
        calls:
            - [setEventDispatcher, ["@event_dispatcher"]]
            - [setSuccessEventName, ["%tagcade_user.events.login_success%"]]

    tagcade_user.request.user_system.request_matcher:
        class: Tagcade\Bundle\UserBundle\Request\UserSystem\RequestMatcher

    tagcade_app.event_listener.user_type_security_listener:
        class: Tagcade\Bundle\UserBundle\EventListener\UserTypeSecurityListener
        arguments:
            - @security.context
            - @annotation_reader
        tags:
            - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }